using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Runtime.Remoting.Messaging;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace _16._12._24r
{
	internal class Program
	{
		public delegate void NotificationHandler(string message);

		public class User
		{
			public string Name { get; set; }
			public int Pirority { get; set; }
		}

		public interface INotifier
		{
			void Notify(string message);
		}

		public class EmailNotifier : INotifier
		{
			public void Notify(string message)
			{
				Console.WriteLine($"Email wysłany: {message}");
			}
		}
		public class SMSNotifier : INotifier
		{
			public void Notify(string message)
			{
				Console.WriteLine($"SMS wysłany: {message}");
			}
		}
		public class PushNotifier : INotifier
		{
			public void Notify(string message)
			{
				Console.WriteLine($"Push wysłany: {message}");
			}
		}

		public void Notify(string message)
		{
			Console.WriteLine($"Powiadomienie wysłane: {message}");
		}

		public class NotificationManager
		{
			public NotificationHandler Notify;
			public Dictionary<string, User> users = new Dictionary<string, User>();
			public List<INotifier> notifiers = new List<INotifier>();

			public void AddUser(string name, int pirority)
			{
				if (!users.ContainsKey(name))
				{
					users[name] = new User() { Name = name, Pirority = pirority };
					Console.WriteLine($"Dodano użytkownika: {name} z piorytetem {pirority}");
				} else
				{
					Console.WriteLine($"Użytkownik {name} już istnieje");
				}
			}
			public void RemoveUser(string name)
			{
				if (users.Remove(name))
				{
					Console.WriteLine($"Usunięto użytkownika {name}");
				} else
				{
					Console.WriteLine($"Użytkownik {name} nie istnieje");
				}
			}
			public User GetUserByName(string name)
			{
				if (users.TryGetValue(name, out var user))
				{
					return user;
				}
				return null;
			}
			public void ListUsers()
			{
				if (users.Count == 0)
				{
					Console.WriteLine($"Brak użytkowników");
					return;
				}
				Console.WriteLine($"Lista użytkowników:");
				int index = 1;
				foreach (var user in users)
				{
					Console.WriteLine($"{index}. {user.Value.Name} (piorytet: {user.Value.Pirority}");
					index++;
				}
			}
			public void SendNotification(string message, int priority)
			{
				if (notifiers.Count == 0)
				{
					Console.WriteLine("Brak dostępnych metod powiadomień");
					return;
				}
				var filteredUsers = new List<User>(users.Values).FindAll(u => u.Name == message); //w 2 powinno być "<="
				if (filteredUsers.Count == 0)
				{
					Console.WriteLine($"Brak użytkowników z piorytetem równym lub niższym niż {priority}");
					return;
				}
				Console.WriteLine($"Wiadomość: \"{message}\"");
				foreach (var notifier in notifiers)
				{
					notifier.Notify(message);
				}

				Console.WriteLine("Powiadomienie zostało wysłane do:");
				foreach (var user in filteredUsers)
				{
					Console.WriteLine($" - {user.Name} (piorytet: {user.Pirority})");
				}
			}
			public void AddNotifier(INotifier notifier)
			{
				if (!notifiers.Contains(notifier))
				{
					notifiers.Add(notifier);
					Console.WriteLine("Metoda powiadomienia została dodana");
				} else
				{
					Console.WriteLine("Ta metoda powiadomienia już istnieje");
				}
			}
			public void RemoveNotifier(INotifier notifier)
			{
				if (notifiers.Remove(notifier))
				{
					Console.WriteLine("Metoda powidomienia została usunięta");
				} else
				{
					Console.WriteLine("Nie znaleziono tej metody powiadomienia");
				}
			}
			public void ListNotifiers()
			{
				if(notifiers.Count == 0)
				{
					Console.WriteLine("Brak dostępnych metod powiadomień");
					return;
				}
				Console.WriteLine("Dostępne metody powiadomień: ");
				foreach (var notifier in notifiers)
				{
					Console.WriteLine(notifier.GetType().Name);
				}
			}
		}
		static void Main(string[] args)
		{
			var notificationManager = new NotificationManager();

			var emailNotifier = new EmailNotifier();
			var smsNotifier = new SMSNotifier();
			var pushNotifier = new PushNotifier();

			while (true)
			{
				Console.WriteLine("\nMenu");
				Console.WriteLine("1.Dodaj użytkownika");
				Console.WriteLine("2.Usuń użytkownika");
				Console.WriteLine("3.Wyślij powiadomienie do użytkownika");
				Console.WriteLine("4.Wyświtl użytkowników");
				Console.WriteLine("5.Dodaj metodę powiadomień");
				Console.WriteLine("6.Usuń metodę powiadomień");
				Console.WriteLine("7.Wyświetl metody powiadomień");
				Console.WriteLine("8.Wyjdź");

				Console.WriteLine("\nWybierz opcję: ");

				var choice = Console.ReadLine();

				switch (choice)
				{
					case "1":
						
						break;
					case "2":

						break;
					case "3":

						break;
					case "4":

						break;
					case "5":

						break;
					case "6":

						break;
					case "7":

						break;
					case "8":
						return;
					default:
						Console.WriteLine("Nieprawidłowa opcja. Spróbuj ponownie");
						break;
				}
			}
		}
	}
}
//DOKOŃCZ CASE'Y
