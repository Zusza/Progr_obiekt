using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Szyper_12._01._25r
{
    internal class Program
    {
        public delegate void NotificationHandler(string message);
        
        public class User
        {
            public string Name { get; set; }
            public int Priority { get; set; }
        }

        public interface INotifier
        {
            void Notify(string message);
        }

        public class EmailNotifier : INotifier
        {
            public void Notify(string message)
            {
                Console.WriteLine($"Email wysłany: {message}");
            }
        }

        public class SMSNotifier : INotifier
        {
            public void Notify(string message)
            {
                Console.WriteLine($"SMS wysłany {message}");
            }
        }

        public class PushNotifier : INotifier
        {
            public void Notify(string message)
            {
                Console.WriteLine($"Push wysłany: {message}");
            }
        }

        public class NotificationManager
        {
            public NotificationHandler Notify;
            public Dictionary<string, User> users = new Dictionary<string, User>();
            public List<INotifier> notifiers = new List<INotifier>();

            public void AddUser(string name, int priority)
            {
                if (!users.ContainsKey(name))
                {
                    users[name] = new User() { Name = name, Priority = priority };
                    Console.WriteLine($"Dodano użytkownika: {name} z piorytetem {priority}");
                }
                else
                {
                    Console.WriteLine($"Użytkownik {name} już istnieje");
                }
            }

            public void RemoveUser(string name)
            {
                if (users.Remove(name))
                {
                    Console.WriteLine($"Usunięto użytkownika {name}");
                }
                else
                {
                    Console.WriteLine($"Użytkownik {name} nie istnieje");
                }
            }

            public void ListUsers()
            {
                if (users.Count == 0)
                {
                    Console.WriteLine("Brak użytkowników");
                    return;
                }
                Console.WriteLine("Lista użytkowników");
                int index = 1;
                foreach (var user in users)
                {
                    Console.WriteLine($"{index}.{user.Value.Name} (piorytet: {user.Value.Priority})");
                    index++;
                }
            }

            public void SendNotification(string message, int priority)
            {
                if (notifiers.Count == 0)
                {
                    Console.WriteLine("Brak dostępnych metod powiadomień");
                    return;
                }
                
                var filteredUsers = new List<User>(users.Values).FindAll(u => u.Name == message);
                if (filteredUsers.Count == 0)
                {
                    Console.WriteLine($"Brak użytkowników z priorytetem równym lub niższym niż {priority}");
                    return;
                }

                Console.WriteLine($"Wiadomość: \"{message}\"");
                foreach (var notifier in notifiers)
                {
                    notifier.Notify(message);
                }

                Console.WriteLine("Powiadomienie zostało wysłane do:");
                foreach (var user in filteredUsers)
                {
                    Console.WriteLine($" - {user.Name} (priorytet: {user.Priority})");
                }
            }

            public void AddNotifier(INotifier notifier)
            {
               if (!notifiers.Contains(notifier))
                {
                    notifiers.Add(notifier);
                    Console.WriteLine("Metoda powiadomienia została dodana");
                }
                else
                {
                    Console.WriteLine("Ta metoda powiadomienia już istnieje");
                }
            }

            public void RemoveNotifier(INotifier notifier)
            {
                if (notifiers.Remove(notifier))
                {
                    Console.WriteLine("Metoda powiadomienia została usunięta");
                }
                else
                {
                    Console.WriteLine("Nie znaleziono tej metody powiadomienia");
                }
            }

            public void ListNotifiers()
            {
                if (notifiers.Count == 0)
                {
                    Console.WriteLine("Brak dostępnych metod powiadomień");
                    return;
                }

                Console.WriteLine("Dostępne metody powiadomień:");
                foreach (var notifier in notifiers)
                {
                    Console.WriteLine(notifier.GetType().Name);
                }
            }
        }
        static void Main(string[] args)
        {
            var notificationManager = new NotificationManager();

            var emailNotifier = new EmailNotifier();
            var smsNotifier = new SMSNotifier();
            var pushNotifier = new PushNotifier();

            while (true)
            {
                Console.WriteLine("\nMenu");
                Console.WriteLine("1.Dodaj użytkownika");
                Console.WriteLine("2.Usuń użytkownika");
                Console.WriteLine("3.Wyślij powiadomienie");
                Console.WriteLine("4.Wyświetl użytkowników");
                Console.WriteLine("5.Dodaj metodę powiadomień");
                Console.WriteLine("6.Usuń metodę powiadomień");
                Console.WriteLine("7.Wyświetl metody powiadomień");
                Console.WriteLine("8.Wyjdź");

                Console.WriteLine("Wybierz opcję:");
                var choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        Console.Write("Podaj imię użytkownika: ");
                        var name = Console.ReadLine();
                        Console.Write("Podaj priorytet użytkownika: ");
                        if (int.TryParse(Console.ReadLine(), out int priority))
                        {
                            notificationManager.AddUser(name, priority);
                        }
                        else
                        {
                            Console.WriteLine("Nieprawidłowy priorytet");
                        }
                        break;
                    case "2":
                        Console.Write("Podaj imię użytkownika do usunięcia: ");
                        name = Console.ReadLine();
                        notificationManager.RemoveUser(name);
                        break;
                    case "3":
                        Console.Write("Podaj wiadomość: ");
                        var message = Console.ReadLine();
                        Console.Write("Podaj priorytet: ");
                        if (int.TryParse(Console.ReadLine(), out priority))
                        {
                            notificationManager.SendNotification(message, priority);
                        }
                        else
                        {
                            Console.WriteLine("Nieprawidłowy priorytet");
                        }
                        break;
                    case "4":
                        notificationManager.ListUsers();
                        break;
                    case "5":
                        Console.WriteLine("Wybierz metodę powiadomień: 1.Email, 2.SMS, 3.Push");
                        var method = Console.ReadLine();
                        switch (method)
                        {
                            case "1":
                                notificationManager.AddNotifier(emailNotifier);
                                break;
                            case "2":
                                notificationManager.AddNotifier(smsNotifier);
                                break;
                            case "3":
                                notificationManager.AddNotifier(pushNotifier);
                                break;
                        }
                        break;
                    case "6":
                        Console.WriteLine("Wybierz metodę powiadomień do usunięcia: 1.Email, 2.SMS, 3.Push");
                        method = Console.ReadLine();
                        switch (method)
                        {
                            case "1":
                                notificationManager.RemoveNotifier(emailNotifier);
                                break;
                            case "2":
                                notificationManager.RemoveNotifier(smsNotifier);
                                break;
                            case "3":
                                notificationManager.RemoveNotifier(pushNotifier);
                                break;
                        }
                        break;
                    case "7":
                        notificationManager.ListNotifiers();
                        break;
                    case "8":
                        return;
                    default:
                        Console.WriteLine("Nieprawidłowa opcja. Spróbuj ponownie.");
                        break;
                }
            }
        }
    }
}
